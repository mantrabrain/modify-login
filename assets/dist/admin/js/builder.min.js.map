{"version":3,"file":"admin/js/builder.min.js","mappings":"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","sources":["webpack://modify-login/./src/admin/js/builder.js"],"sourcesContent":["jQuery(document).ready(function($) {\n    // Function to show notifications\n    function showNotification(type, message) {\n        // Create notification container if it doesn't exist\n        if (!$('#modify-login-notifications').length) {\n            $('body').append('<div id=\"modify-login-notifications\" class=\"fixed top-4 right-4 z-50\"></div>');\n        }\n        \n        // Generate unique ID for the notification\n        const id = 'notification-' + Date.now();\n        \n        // Create notification element\n        const notification = $(`\n            <div id=\"${id}\" class=\"notification p-4 mb-3 rounded-lg shadow-md flex items-center justify-between transform translate-x-full opacity-0 transition-all duration-300\" style=\"min-width: 300px; max-width: 400px;\">\n                <div class=\"flex items-center\">\n                    <span class=\"notification-icon mr-3\"></span>\n                    <p class=\"notification-message text-sm m-0\">${message}</p>\n                </div>\n                <button class=\"notification-close ml-3 text-gray-500 hover:text-gray-700 focus:outline-none\" aria-label=\"Close\">\n                    <span class=\"dashicons dashicons-no-alt\"></span>\n                </button>\n            </div>\n        `);\n        \n        // Set notification type\n        if (type === 'success') {\n            notification.addClass('bg-green-100 border-l-4 border-green-600 text-green-900');\n            notification.find('.notification-icon').addClass('dashicons dashicons-yes-alt text-green-600');\n        } else if (type === 'reset') {\n            notification.addClass('bg-blue-100 border-l-4 border-blue-600 text-blue-900'); \n            notification.find('.notification-icon').addClass('dashicons dashicons-update text-blue-600');\n        } else {\n            notification.addClass('bg-red-100 border-l-4 border-red-600 text-red-900');\n            notification.find('.notification-icon').addClass('dashicons dashicons-warning text-red-600');\n        }\n        \n        // Add notification to container\n        $('#modify-login-notifications').append(notification);\n        \n        // Show notification with animation\n        setTimeout(() => {\n            notification.removeClass('translate-x-full opacity-0');\n        }, 10);\n        \n        // Add click handler for close button\n        notification.find('.notification-close').on('click', () => {\n            closeNotification(id);\n        });\n        \n        // Auto-close after 5 seconds for success, 8 seconds for errors\n        setTimeout(() => {\n            closeNotification(id);\n        }, type === 'success' || type === 'reset' ? 5000 : 8000);\n    }\n    \n    // Function to close notification\n    function closeNotification(id) {\n        const notification = $(`#${id}`);\n        \n        // Animate out\n        notification.addClass('translate-x-full opacity-0');\n        \n        // Remove after animation completes\n        setTimeout(() => {\n            notification.remove();\n        }, 300);\n    }\n    \n    // Set up WordPress Gutenberg Color Picker\n    const { Component, render, createElement } = wp.element;\n    const { ColorPicker, BaseControl } = wp.components;\n    \n    // Default settings for reset\n    const defaultSettings = {\n        background_color: '#ffffff',\n        background_image: '',\n        background_size: 'cover',\n        background_position: 'center center',\n        background_repeat: 'no-repeat',\n        background_opacity: 1.0,\n        logo_url: '',\n        logo_width: '84px',\n        logo_height: '84px',\n        logo_position: 'center',\n        form_background: '#ffffff',\n        form_border_radius: '4px',\n        form_padding: '20px',\n        button_color: '#0073aa',\n        button_text_color: '#ffffff',\n        custom_css: '',\n        link_color: '',\n        link_hover_color: '',\n        label_color: ''\n    };\n    \n    // Initialize each color picker input\n    $('.color-picker').each(function() {\n        const input = $(this);\n        const inputId = input.attr('id');\n        const defaultColor = '';\n        const currentColor = input.val() || defaultColor;\n        const container = $('<div class=\"gutenberg-color-picker-container\"></div>');\n        \n        // Add special initial class if empty value\n        if (!currentColor) {\n            //container.addClass('color-empty');\n        }\n        \n        // Replace the input with a container\n        input.after(container);\n        \n        // Create a hidden input to store the value\n        const hiddenInput = $(`<input type=\"hidden\" id=\"${inputId}\" name=\"${inputId}\" value=\"${currentColor}\">`);\n        input.replaceWith(hiddenInput);\n        \n        // Create color picker component\n        class ColorPickerComponent extends Component {\n            constructor(props) {\n                super(props);\n                this.state = {\n                    color: props.initialColor,\n                    isOpen: false\n                };\n                \n                // Store a reference to the color input\n                this.colorInputRef = React.createRef();\n            }\n            \n            componentDidUpdate(prevProps) {\n                // Check if initialColor prop changed\n                if (prevProps.initialColor !== this.props.initialColor) {\n                    this.setState({ color: this.props.initialColor });\n                }\n            }\n            \n            clearColor = () => {\n                this.setState({ color: '' });\n                this.props.onChange('');\n                \n                // Force update the input field DOM element\n                if (this.colorInputRef.current) {\n                    this.colorInputRef.current.value = '';\n                }\n            }\n            \n            render() {\n                return createElement(\n                    BaseControl,\n                    { id: this.props.inputId },\n                    createElement('div', { className: 'color-picker-main flex items-center' },\n                        createElement('button', {\n                            type: 'button',\n                            className: 'color-picker-button',\n                            onClick: () => this.setState({ isOpen: !this.state.isOpen }),\n                            style: {\n                                backgroundColor: this.state.color || 'transparent',\n                                width: '32px',\n                                height: '32px',\n                                borderRadius: '4px',\n                                border: '1px solid #ccc',\n                                cursor: 'pointer',\n                                boxShadow: '0 1px 0 #ccc'\n                            }\n                        }),\n                        createElement('input', {\n                            type: 'text',\n                            className: 'color-picker-input',\n                            value: this.state.color || '',\n                            ref: this.colorInputRef,\n                            onClick: () => this.setState({ isOpen: !this.state.isOpen }),\n                            onChange: (e) => {\n                                const newColor = e.target.value;\n                                this.setState({ color: newColor });\n                                this.props.onChange(newColor);\n                            },\n                            style: {\n                                marginLeft: '8px',\n                                width: '80px',\n                                height: '32px',\n                                padding: '0 8px',\n                                borderRadius: '4px',\n                                border: '1px solid #ccc',\n                                fontFamily: 'monospace',\n                                cursor: 'pointer'\n                            }\n                        }),\n                        createElement('button', {\n                            type: 'button',\n                            className: 'color-picker-clear',\n                            onClick: this.clearColor,\n                            style: {\n                                marginLeft: '4px',\n                                padding: '0',\n                                width: '28px',\n                                height: '32px',\n                                borderRadius: '4px',\n                                border: '1px solid #ccc',\n                                cursor: 'pointer',\n                                background: '#f0f0f1',\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'center'\n                            }\n                        }, createElement('span', {\n                            className: 'dashicons dashicons-no-alt',\n                            style: {\n                                fontSize: '16px',\n                                width: '16px',\n                                height: '16px'\n                            }\n                        }))\n                    ),\n                    this.state.isOpen && createElement(\n                        'div',\n                        { className: 'color-picker-popover' },\n                        createElement(\n                            ColorPicker,\n                            {\n                                color: this.state.color,\n                                onChangeComplete: (colorObject) => {\n                                    const newColor = colorObject.hex;\n                                    this.setState({ color: newColor });\n                                    this.props.onChange(newColor);\n                                }\n                            }\n                        )\n                    )\n                );\n            }\n        }\n        \n        // Render the component\n        render(\n            createElement(ColorPickerComponent, {\n                inputId: inputId,\n                initialColor: currentColor,\n                onChange: (newColor) => {\n                    hiddenInput.val(newColor).trigger('change');\n                    updatePreview();\n                }\n            }),\n            container[0]\n        );\n    });\n\n    // Initialize media dropzones\n    $('.media-dropzone').each(function() {\n        const dropzone = $(this);\n        const dropzoneArea = dropzone.find('.dropzone-area');\n        const input = dropzone.find('input[type=\"hidden\"]');\n        const imagePreview = dropzone.find('.image-preview');\n        const previewImg = imagePreview.find('img');\n        const targetField = dropzone.data('target');\n        \n        // Show existing image preview if available\n        if (input.val()) {\n            previewImg.attr('src', input.val());\n            imagePreview.removeClass('hidden');\n            dropzoneArea.addClass('hidden');\n            \n            // Try to get the filename from the URL\n            const url = new URL(input.val());\n            const filename = url.pathname.split('/').pop();\n            imagePreview.find('.filename').text(filename);\n            \n            // Create a temporary image to get dimensions\n            const tempImg = new Image();\n            tempImg.onload = function() {\n                imagePreview.find('.dimensions').text(`${this.width} × ${this.height}`);\n            };\n            tempImg.src = input.val();\n        }\n        \n        // Setup click handler on dropzone area to open media library\n        dropzoneArea.on('click', function(e) {\n            e.preventDefault();\n            openMediaLibrary(input, imagePreview, dropzoneArea);\n        });\n        \n        // Handle drag and drop events\n        dropzoneArea.on('dragover', function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            $(this).addClass('dragover');\n        });\n        \n        dropzoneArea.on('dragleave', function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            $(this).removeClass('dragover');\n        });\n        \n        dropzoneArea.on('drop', function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            $(this).removeClass('dragover');\n            \n            // Open the media library instead of direct handling\n            // WordPress media library can handle the dropped files\n            openMediaLibrary(input, imagePreview, dropzoneArea);\n        });\n        \n        // Handle remove image button\n        dropzone.find('.remove-image-button').on('click', function(e) {\n            e.preventDefault();\n            input.val('').trigger('change');\n            imagePreview.addClass('hidden');\n            dropzoneArea.removeClass('hidden');\n            updatePreview();\n        });\n    });\n    \n    // Initialize opacity slider\n    initializeOpacitySlider();\n    \n    function initializeOpacitySlider() {\n        const container = $('.opacity-slider-container');\n        const track = $('.opacity-slider-track');\n        const fill = $('.opacity-slider-fill');\n        const handle = $('.opacity-slider-handle');\n        const input = $('#background_opacity');\n        const valueDisplay = $('#background_opacity_value');\n        \n        // Set initial position\n        const initialValue = parseFloat(input.val()) || 1.0; // Default to 1.0 (100%) if not set\n        updateSliderPosition(initialValue);\n        \n        // Update the slider UI\n        function updateSliderPosition(value) {\n            // Ensure value is between 0 and 1\n            value = Math.max(0, Math.min(1, value));\n            \n            // Calculate the position percentage\n            const percent = value * 100;\n            \n            // Update the fill and handle positions\n            fill.css('width', `${percent}%`);\n            handle.css('left', `${percent}%`);\n            handle.css('right', 'auto');\n            handle.css('transform', 'translate(-50%, -50%)');\n            \n            // Update the input value and display\n            input.val(value);\n            valueDisplay.text(`${Math.round(percent)}%`);\n        }\n        \n        // Handle mouse/touch down on track\n        track.on('mousedown touchstart', function(e) {\n            e.preventDefault();\n            handleSliderInteraction(e);\n            \n            // Add mouse/touch move and up events\n            $(document).on('mousemove touchmove', handleSliderInteraction);\n            $(document).on('mouseup touchend', function() {\n                $(document).off('mousemove touchmove', handleSliderInteraction);\n                $(document).off('mouseup touchend');\n            });\n        });\n        \n        // Handle mouse/touch down on handle\n        handle.on('mousedown touchstart', function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            \n            // Add mouse/touch move and up events\n            $(document).on('mousemove touchmove', handleSliderInteraction);\n            $(document).on('mouseup touchend', function() {\n                $(document).off('mousemove touchmove', handleSliderInteraction);\n                $(document).off('mouseup touchend');\n            });\n        });\n        \n        // Process mouse/touch interaction\n        function handleSliderInteraction(e) {\n            // Get mouse/touch position\n            let clientX;\n            if (e.type === 'touchmove' || e.type === 'touchstart') {\n                clientX = e.originalEvent.touches[0].clientX;\n            } else {\n                clientX = e.clientX;\n            }\n            \n            // Get track dimensions and position\n            const trackRect = track[0].getBoundingClientRect();\n            \n            // Calculate value based on position\n            let value = (clientX - trackRect.left) / trackRect.width;\n            \n            // Constrain value between 0 and 1\n            value = Math.max(0, Math.min(1, value));\n            \n            // Update slider and trigger change\n            updateSliderPosition(value);\n            updatePreview();\n        }\n        \n        // Keyboard accessibility\n        handle.on('keydown', function(e) {\n            let value = parseFloat(input.val());\n            \n            switch (e.key) {\n                case 'ArrowRight':\n                case 'ArrowUp':\n                    value = Math.min(1, value + 0.01);\n                    break;\n                case 'ArrowLeft':\n                case 'ArrowDown':\n                    value = Math.max(0, value - 0.01);\n                    break;\n                case 'Home':\n                    value = 0;\n                    break;\n                case 'End':\n                    value = 1;\n                    break;\n                default:\n                    return;\n            }\n            \n            e.preventDefault();\n            updateSliderPosition(value);\n            updatePreview();\n        });\n    }\n    \n    // Handle all image property toggle buttons - Keep popovers within their parent containers\n    $('.toggle-image-properties').on('click', function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        const button = $(this);\n        const targetId = button.data('target');\n        const popover = $(`#${targetId}`);\n        \n        // Close any other open popovers\n        $('.image-properties.active').not(popover).removeClass('active');\n        \n        // Toggle current popover visibility\n        popover.toggleClass('active');\n        \n        // Make sure popover is in right position (no need to manually position since we use CSS)\n        if (popover.hasClass('active')) {\n            // Ensure the popover is within the #modify-login-builder container\n            if (!popover.closest('#modify-login-builder').length) {\n                $('#modify-login-builder').find(`#${targetId}`).addClass('active');\n            }\n        }\n    });\n    \n    // Function to open the media library\n    function openMediaLibrary(input, imagePreview, dropzoneArea) {\n        const frame = wp.media({\n            title: 'Select Image',\n            button: {\n                text: 'Use this image'\n            },\n            multiple: false,\n            library: {\n                type: 'image'\n            }\n        });\n\n        frame.on('select', function() {\n            const attachment = frame.state().get('selection').first().toJSON();\n            input.val(attachment.url).trigger('change');\n            \n            // Update preview\n            imagePreview.find('img').attr('src', attachment.url);\n            imagePreview.find('.filename').text(attachment.filename);\n            imagePreview.find('.dimensions').text(`${attachment.width} × ${attachment.height}`);\n            \n            // Show preview, hide dropzone\n            imagePreview.removeClass('hidden');\n            dropzoneArea.addClass('hidden');\n            \n            updatePreview();\n        });\n\n        frame.open();\n    }\n    \n    // Close popovers when clicking outside\n    $(document).on('click', function(e) {\n        if (!$(e.target).closest('.image-properties, .toggle-image-properties, .color-picker-popover, .color-picker-button').length) {\n            $('.image-properties.active').removeClass('active');\n        }\n    });\n    \n    // Close popovers when clicking close button\n    $('.close-popover').on('click', function(e) {\n        e.preventDefault();\n        $(this).closest('.image-properties').removeClass('active');\n    });\n\n    // Handle form changes\n    $('.form-group input:not(.color-picker), .form-group textarea, .form-group select').on('change input', function() {\n        updatePreview();\n    });\n\n    // Update preview iframe\n    function updatePreview() {\n        const preview = $('#login-preview');\n        const settings = {};\n        \n        // Collect all form values for settings object\n        $('.form-group input, .form-group textarea, .form-group select').each(function() {\n            const input = $(this);\n            const name = input.attr('name');\n            const value = input.val();\n            \n            // Include all fields, even if empty\n            settings[name] = value;\n            \n            // Debug logo fields\n            if (name === 'logo_url' || name === 'logo_width' || name === 'logo_height') {\n                console.log(`Sending ${name} with value: ${value}`);\n            }\n        });\n\n        // Apply settings to preview iframe\n        const previewDoc = preview[0].contentDocument || preview[0].contentWindow.document;\n        const style = previewDoc.createElement('style');\n        style.id = 'modify-login-custom-css';\n        const customCss = previewDoc.getElementById('modify-login-custom-css');\n        \n        // Generate CSS based on current settings\n        let css = `\n            body.login {\n                ${settings.background_color ? `background-color: ${settings.background_color} !important;` : ''}\n                ${settings.background_image ? `position: relative !important;` : ''}\n            }\n            \n            ${settings.background_image ? `\n                body.login::before {\n                    content: \"\" !important;\n                    position: absolute !important;\n                    top: 0 !important;\n                    left: 0 !important;\n                    width: 100% !important;\n                    height: 100% !important;\n                    background-image: url('${settings.background_image}') !important;\n                    ${settings.background_size ? `background-size: ${settings.background_size} !important;` : ''}\n                    ${settings.background_position ? `background-position: ${settings.background_position} !important;` : ''}\n                    ${settings.background_repeat ? `background-repeat: ${settings.background_repeat} !important;` : ''}\n                    opacity: ${settings.background_opacity} !important;\n                    z-index: -1 !important;\n                }\n            ` : ''}\n            .login form {\n                ${settings.form_background ? `background: ${settings.form_background} !important;` : ''}\n                ${settings.form_border_radius ? `border-radius: ${settings.form_border_radius} !important;` : ''}\n                ${settings.form_padding ? `padding: ${settings.form_padding} !important;` : ''}\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.13) !important;\n            }\n            .wp-core-ui .button-primary {\n                ${settings.button_color ? `background: ${settings.button_color} !important; border-color: ${settings.button_color} !important;` : ''}\n                ${settings.button_text_color ? `color: ${settings.button_text_color} !important;` : ''}\n                text-decoration: none !important;\n                text-shadow: none !important;\n            }\n            \n            /* Link Colors */\n            ${settings.link_color ? `.login a, .login #nav a, .login #backtoblog a {\n                color: ${settings.link_color} !important;\n            }` : ''}\n            \n            /* Link Hover Colors */\n            ${settings.link_hover_color ? `.login a:hover, .login #nav a:hover, .login #backtoblog a:hover {\n                color: ${settings.link_hover_color} !important;\n            }` : ''}\n            \n            /* Form Label Colors */\n            ${settings.label_color ? `.login form label {\n                color: ${settings.label_color} !important;\n            }` : ''}\n        `;\n\n        \n        // Add logo styles if logo is set\n        if (settings.logo_url) {\n            css += `\n                .login h1 a {\n                    background-image: url('${settings.logo_url}') !important;\n                    ${settings.logo_width ? `width: ${settings.logo_width} !important;` : ''}\n                    ${settings.logo_height ? `height: ${settings.logo_height} !important;` : ''}\n                    background-size: contain !important;\n                    background-position: center !important;\n                    background-repeat: no-repeat !important;\n                    text-indent: -9999px !important;\n                    ${settings.logo_position ? `text-align: ${settings.logo_position} !important;` : ''}\n                    margin: 0 auto 25px auto !important;\n                }\n            `;\n        }\n        \n        // Add user's custom CSS\n        if (settings.custom_css) {\n            css += settings.custom_css;\n        }\n        \n        style.textContent = css;\n\n        // Check if customCss exists, if not create and append it\n        if (customCss) {\n            // Update existing style element\n            customCss.innerHTML = css;\n        } else {\n            // If it doesn't exist yet, append the new style element\n            try {\n                previewDoc.head.appendChild(style);\n                console.log('Added new style element to preview');\n            } catch (e) {\n                console.error('Error updating preview styles:', e);\n            }\n        }\n    }\n\n    // Function to adjust color brightness (similar to the PHP version)\n    function adjustBrightness(hex, steps) {\n        // Remove # if present\n        hex = hex.replace('#', '');\n        \n        // Parse the hex color\n        const r = parseInt(hex.substr(0, 2), 16);\n        const g = parseInt(hex.substr(2, 2), 16);\n        const b = parseInt(hex.substr(4, 2), 16);\n        \n        // Adjust brightness\n        const adjustR = Math.max(0, Math.min(255, r + steps));\n        const adjustG = Math.max(0, Math.min(255, g + steps));\n        const adjustB = Math.max(0, Math.min(255, b + steps));\n        \n        // Convert back to hex\n        const rHex = adjustR.toString(16).padStart(2, '0');\n        const gHex = adjustG.toString(16).padStart(2, '0');\n        const bHex = adjustB.toString(16).padStart(2, '0');\n        \n        return `#${rHex}${gHex}${bHex}`;\n    }\n\n    // Handle save button\n    $('.save-button').on('click', function(e) {\n        e.preventDefault();\n        const button = $(this);\n        const formData = new FormData();\n\n        // Add action parameter for saving\n        formData.append('action', 'modify_login_save_builder_settings');\n        formData.append('nonce', modifyLoginBuilder.nonce);\n\n        // Collect all form values for AJAX\n        $('.form-group input, .form-group textarea, .form-group select').each(function() {\n            const input = $(this);\n            const name = input.attr('name');\n            const value = input.val();\n            \n            // Include all fields, even if empty\n            formData.append(name, value);\n            \n            // Debug logo fields\n            if (name === 'logo_url' || name === 'logo_width' || name === 'logo_height') {\n                console.log(`Sending ${name} with value: ${value}`);\n            }\n        });\n\n        // Disable button and show loading state\n        button.prop('disabled', true).text('Saving...');\n\n        // Send AJAX request to save settings\n        $.ajax({\n            url: modifyLoginBuilder.ajax_url,\n            type: 'POST',\n            data: formData,\n            processData: false,\n            contentType: false,\n            success: function(response) {\n                if (response.success) {\n                    button.text('Settings Saved!');\n                    setTimeout(function() {\n                        button.text('Save Settings');\n                    }, 2000);\n                    \n                    // Show success notification\n                    showNotification('success', 'Settings saved successfully.');\n                } else {\n                    button.text('Error Saving');\n                    setTimeout(function() {\n                        button.text('Save Settings');\n                    }, 2000);\n                    \n                    // Show error notification\n                    showNotification('error', response.data || 'Error saving settings. Please try again.');\n                }\n            },\n            error: function(xhr, status, error) {\n                button.text('Error Saving');\n                setTimeout(function() {\n                    button.text('Save Settings');\n                }, 2000);\n                \n                // Show detailed error notification\n                showNotification('error', 'Server error: ' + (xhr.responseText || error));\n            },\n            complete: function() {\n                button.prop('disabled', false);\n            }\n        });\n    });\n    \n    // Handle reset button\n    $('#reset-all-button').on('click', function(e) {\n        e.preventDefault();\n        \n        // Create custom confirmation modal\n        const modalOverlay = $('<div class=\"custom-modal-overlay\"></div>');\n        const modal = $(`\n            <div class=\"custom-modal bg-white rounded-lg shadow-lg w-96\">\n                <div class=\"custom-modal-header px-5 py-4 border-b border-gray-200 flex items-center\">\n                    <span class=\"dashicons dashicons-info text-blue-500 mr-2 text-xl\"></span>\n                    <h3 class=\"custom-modal-title text-lg font-semibold text-gray-900\">Reset Form</h3>\n                </div>\n                <div class=\"custom-modal-content p-5 text-gray-600\">\n                    <p class=\"mb-2\">You are about to reset all form fields to their default values.</p>\n                    <p class=\"mb-2\">This will only reset the form, not save the changes.</p>\n                    <p>Click Save after resetting if you want to apply these changes.</p>\n                </div>\n                <div class=\"custom-modal-actions p-4 bg-gray-50 flex justify-end gap-3 rounded-b-lg\">\n                    <button class=\"custom-modal-cancel px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300\">Cancel</button>\n                    <button class=\"custom-modal-confirm px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600\">Reset Form</button>\n                </div>\n            </div>\n        `);\n        \n        modalOverlay.append(modal);\n        $('body').append(modalOverlay);\n        \n        // Fade in animation\n        setTimeout(function() {\n            modalOverlay.addClass('active');\n        }, 10);\n        \n        // Handle cancel button\n        modal.find('.custom-modal-cancel').on('click', function() {\n            // Close modal with animation\n            modalOverlay.removeClass('active');\n            setTimeout(function() {\n                modalOverlay.remove();\n            }, 300);\n        });\n        \n        // Handle confirm button\n        modal.find('.custom-modal-confirm').on('click', function() {\n            // Close modal with animation\n            modalOverlay.removeClass('active');\n            setTimeout(function() {\n                modalOverlay.remove();\n                \n                // Get the reset button\n                const button = $('#reset-all-button');\n                \n                // Visual feedback\n                const originalText = button.text();\n                button.addClass('opacity-50').prop('disabled', true).text('Resetting...');\n                \n                // Reset all form fields without saving to database\n                // Clear text inputs\n                $('.form-group input[type=\"text\"]').val('').trigger('change');\n                \n                // Reset select elements to defaults\n                $('.form-group select').each(function() {\n                    const select = $(this);\n                    const defaultVal = select.find('option:first').val();\n                    select.val(defaultVal).trigger('change');\n                });\n                \n                // Clear textareas\n                $('.form-group textarea').val('').trigger('change');\n                \n                // Clear hidden inputs\n                $('.form-group input[type=\"hidden\"]').val('').trigger('change');\n                \n                // Handle color pickers\n                $('.gutenberg-color-picker-container').each(function() {\n                    const container = $(this);\n                    const hiddenInput = container.next('input[type=\"hidden\"]');\n                    \n                    // Clear value completely - no default colors\n                    hiddenInput.val('').trigger('change');\n                    \n                    // Update color picker button to be transparent\n                    container.find('.color-picker-button').css('background-color', 'transparent');\n                    \n                    // Clear text input\n                    const inputField = container.find('.color-picker-input');\n                    if (inputField.length) {\n                        inputField.val('');\n                    }\n                    \n                    // Try to use the existing clear button functionality\n                    const clearButton = container.find('.color-picker-clear');\n                    if (clearButton.length) {\n                        clearButton.trigger('click');\n                    }\n                });\n                \n                // Handle image fields\n                $('.media-dropzone').each(function() {\n                    const dropzone = $(this);\n                    const input = dropzone.find('input[type=\"hidden\"]');\n                    const imagePreview = dropzone.find('.image-preview');\n                    const dropzoneArea = dropzone.find('.dropzone-area');\n                    \n                    // Clear value\n                    input.val('').trigger('change');\n                    \n                    // Hide preview, show dropzone\n                    imagePreview.addClass('hidden');\n                    dropzoneArea.removeClass('hidden');\n                });\n                \n                // Clear logo dimensions specifically\n                $('#logo_width, #logo_height').val('').trigger('change');\n                \n                // Clear any custom CSS\n                $('#custom_css').val('').trigger('change');\n                \n                // Reset opacity slider to 100%\n                const opacityTrack = $('.opacity-slider-track');\n                const opacityFill = $('.opacity-slider-fill');\n                const opacityHandle = $('.opacity-slider-handle');\n                const opacityValueDisplay = $('#background_opacity_value');\n                const opacityInput = $('#background_opacity');\n\n                // Set opacity to 100%\n                opacityFill.css('width', '100%');\n                opacityHandle.css('left', '100%');\n                opacityHandle.css('transform', 'translate(-50%, -50%)');\n                opacityValueDisplay.text('100%');\n                opacityInput.val(1.0).trigger('change');\n                \n                // Update preview\n                updatePreview();\n                \n                // Reset button state\n                setTimeout(function() {\n                    button.removeClass('opacity-50').prop('disabled', false).text(originalText);\n                    \n                    // Show notification\n                    showNotification('reset', 'Form has been reset. Click Save if you want to apply these changes.');\n                }, 500);\n            }, 300);\n        });\n    });\n    \n    // Initialize preview\n    updatePreview();\n\n    // Reset button in modal\n    $('#builder-reset-confirm').on('click', function() {\n        // Nothing here - redundant\n    });\n});"],"names":["jQuery","document","ready","$","showNotification","type","message","length","append","id","Date","now","notification","concat","addClass","find","setTimeout","removeClass","on","closeNotification","remove","_wp$element","wp","element","Component","render","createElement","_wp$components","components","ColorPicker","BaseControl","openMediaLibrary","input","imagePreview","dropzoneArea","frame","media","title","button","text","multiple","library","attachment","state","get","first","toJSON","val","url","trigger","attr","filename","width","height","updatePreview","open","preview","settings","each","this","name","value","console","log","previewDoc","contentDocument","contentWindow","style","customCss","getElementById","css","background_color","background_image","background_size","background_position","background_repeat","background_opacity","form_background","form_border_radius","form_padding","button_color","button_text_color","link_color","link_hover_color","label_color","logo_url","logo_width","logo_height","logo_position","custom_css","textContent","innerHTML","head","appendChild","e","error","inputId","currentColor","container","after","hiddenInput","replaceWith","ColorPickerComponent","_Component","props","_this","_classCallCheck","_callSuper","setState","color","onChange","colorInputRef","current","initialColor","isOpen","React","createRef","_inherits","key","prevProps","_this2","className","onClick","backgroundColor","borderRadius","border","cursor","boxShadow","ref","newColor","target","marginLeft","padding","fontFamily","clearColor","background","display","alignItems","justifyContent","fontSize","onChangeComplete","colorObject","hex","dropzone","previewImg","data","URL","pathname","split","pop","tempImg","Image","onload","src","preventDefault","stopPropagation","track","fill","handle","valueDisplay","updateSliderPosition","percent","Math","max","min","round","handleSliderInteraction","clientX","originalEvent","touches","trackRect","getBoundingClientRect","left","parseFloat","off","initializeOpacitySlider","targetId","popover","not","toggleClass","hasClass","closest","formData","FormData","modifyLoginBuilder","nonce","prop","ajax","ajax_url","processData","contentType","success","response","xhr","status","responseText","complete","modalOverlay","modal","originalText","select","defaultVal","next","inputField","clearButton","opacityFill","opacityHandle","opacityValueDisplay","opacityInput"],"sourceRoot":""}